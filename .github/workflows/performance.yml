name: Performance Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  performance:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
        uv run maturin develop --release
    
    - name: Show environment info
      run: |
        echo "=== Environment Info ==="
        echo "CPU cores: $(nproc)"
        echo "Memory: $(free -h | grep Mem | awk '{print $2}')"
        echo "Python: $(python --version)"
        echo "NumPy: $(uv run python -c 'import numpy; print(numpy.__version__)')"
        echo "SciPy: $(uv run python -c 'import scipy; print(scipy.__version__)')"
        echo "========================"
    
    - name: Download CI-specific baseline
      run: |
        # CI環境専用のベースラインを使用（存在する場合）
        if git show origin/main:tests/performance/ci_baseline.json > /tmp/ci_baseline.json 2>/dev/null; then
          echo "CI baseline found in Git history"
          cp /tmp/ci_baseline.json tests/performance/ci_baseline.json
        else
          echo "No CI baseline found - will create initial baseline"
        fi
    
    - name: Check baseline status
      id: baseline-check
      run: |
        if [ -f tests/performance/ci_baseline.json ]; then
          echo "CI baseline exists"
          echo "baseline_exists=true" >> $GITHUB_OUTPUT
          # CI専用ベースラインを使用
          cp tests/performance/ci_baseline.json tests/performance/baseline.json
        else
          echo "No CI baseline found - will create initial baseline"
          echo "baseline_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Run performance tests
      run: |
        # CI環境では並列処理を制限
        export RAYON_NUM_THREADS=2
        uv run pytest tests/performance/test_all_benchmarks.py -v --benchmark-only
    
    - name: Check for performance regressions
      if: steps.baseline-check.outputs.baseline_exists == 'true'
      run: |
        echo "Checking for performance regressions..."
        # CI環境ではより寛容な閾値を使用（40%まで許容）
        uv run python tests/performance/check_regression.py --threshold 1.4 --ci-mode
    
    - name: Create initial CI baseline
      if: steps.baseline-check.outputs.baseline_exists == 'false' && github.ref == 'refs/heads/main'
      run: |
        echo "Creating initial CI baseline from test results..."
        cp benchmark_results/latest.json tests/performance/ci_baseline.json
    
    - name: Skip regression check (no baseline)
      if: steps.baseline-check.outputs.baseline_exists == 'false' && github.ref != 'refs/heads/main'
      run: |
        echo "⚠️ No CI baseline available for comparison."
        echo "Performance regression check skipped."
        echo "CI baseline will be created when merged to main."
    
    - name: Update CI baseline (main branch only)
      if: github.ref == 'refs/heads/main' && success()
      run: |
        echo "Updating CI baseline for main branch..."
        cp benchmark_results/latest.json tests/performance/ci_baseline.json
        
        # Git にci_baseline.jsonをコミット
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add tests/performance/ci_baseline.json
        git diff --cached --quiet || {
          git commit -m "chore: update CI performance baseline [skip ci]"
          git push origin main
        }